			     C socket programming API

gcc program.c -o prog    // build
./prog			 // run

// needed imports
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <errno.h>

char buf[256];           // buffer for reading/writing
fd_set read_fds, master; // file descriptor list for select()
struct sockaddr_in servaddr;   // the server address
int yes=1;        // for setsockopt() SO_REUSEADDR, below
uint16_t a; // standard short int

if (argc < 3 ) {
      printf("Usage:\n%s <hostname or IP address> <portno>\n",argv[0]);
      exit(1);
    }

int int_port = atoi(argv[2]);   // get int from string the port that was given as argument
int ipaddr = inet_addr(argv[1]);   // check if address is a hostname
if (ipaddr == -1 ) {										// DNS
      struct in_addr inaddr; 
      struct hostent * host = gethostbyname( argv[1] );  // get the address of the server
      if (host == NULL) { printf("Error getting the host address\n"); exit(1);}
      memcpy(&inaddr.s_addr, host->h_addr_list[0],sizeof(inaddr));
      printf("Connecting to %s ...\n",inet_ntoa( inaddr) );  // struct inaddr was needed to print the host
      memcpy(&ipaddr, host->h_addr_list[0],sizeof(unsigned long int)) ; // get the ip address of the host given with the hostname
    }



-------------------------------------------------------- TCP CLIENT -----------------------------------------------------
// get the socket
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("socket"); exit(1);}

memset(&servaddr,0, sizeof(servaddr));
servaddr.sin_family = AF_INET;
servaddr.sin_addr.s_addr = ipaddr;
servaddr.sin_port = htons( int_port );
// connect to server
if (connect(sock, (struct sockaddr *)&servaddr, sizeof(servaddr)) < 0 ) {perror("connect"); exit(1);}

// SELECT
// add the listener to the master set
FD_ZERO(&read_fds);    // clear the set
FD_ZERO(&master);
FD_SET(0, &master);    // add standard input to master (File Descriptor in)
FD_SET(sock, &master); // add socket (server input) to master

while(1){


	// convert to network representation
	a = htons(a);

	// send number
	send(sock, &a, sizeof(a), 0);

	// receive number
	recv(sock, &suma, sizeof(suma), 0);
        suma = ntohs(suma);

	// SELECT
	read_fds = master;
	if (select(sock+1, &read_fds, NULL, NULL, NULL) == -1) {perror("select"); exit(1);}
	// check if read from keyboard 
	if ( FD_ISSET(0, &read_fds) ) {
		int nbytes = read(0, buf,sizeof(buf)-1);
		// do something with buf read from stdin 
	}
	// check if read from server
	if ( FD_ISSET(sock, &read_fds) ) {
		nbytes = read(sock, buf, sizeof(buf)-1);
		if (nbytes <= 0) {printf("Server has closed connection... closing...\n"); exit(2);}
		write(1,buf, nbytes);  // write the buf to stdout or do something else
	     }
}
close(sock);


-------------------------------------------------------- TCP SERVER -----------------------------------------------------



// get the socket
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {perror("socket"); exit(1);}

// lose the pesky "address already in use" error message
if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &yes, sizeof(int) ) == -1) {perror("setsockopt:"); exit(1);}

// bind
memset(&myaddr, 0, sizeof(myaddr));
myaddr.sin_family = AF_INET;
myaddr.sin_addr.s_addr = INADDR_ANY;
myaddr.sin_port = htons(int_port);
if (bind(sock, (struct sockaddr *)&myaddr, sizeof(myaddr)) == -1) {perror("bind:"); exit(1);}

// listen
if (listen(listener, 10) == -1) {perror("listen"); exit(1);}

// SELECT
// add the listener to the master set
FD_SET(listener, &master);
// keep track of the biggest file descriptor
fdmax = listener; // so far, it's this one

while(1){

	// handle new connections
	addrlen = sizeof(remoteaddr);
	if ((csock = accept(sock, (struct sockaddr *)&remoteaddr,(socklen_t*)&addrlen)) == -1) {perror("accept");}

	// send to client
	send(csock,buf,strlen(buf)+1,0);

	// handle data from a client
	if ((nbytes = recv(csock, buf, sizeof(buf), 0)) <= 0) { // got error or connection closed by client
		if (nbytes == 0) { printf("<selectserver>: client %d forcibly hung up\n", i);}
		else perror("recv"); }

	close(csock);
}



--------------------------------------------------------- UDP --------------------------------------------------------------

int sfd;
struct sockaddr_in s;
int len = sizeof(struct sockaddr_in);

int n = strlen(msg);

sfd = socket(AF_INET, SOCK_DGRAM, 0);
s.sin_family = AF_INET;
s.sin_port = htons(2222);
s.sin_addr.s_addr = inet_addr("192.168.1.106");

sendto(sfd, msg, n, 0, (struct sockaddr *)&s, len);

int answer = 0;

m = recvfrom(sfd, &answer, sizeof(int), 0, (struct sockaddr *)&s, (unsigned int *)&len);
if (m < 0) error("recvfrom");

write(1,answer,m);

if (bind(sock,(struct sockaddr *)&server,length)<0) error("binding");  // server

--------------------------------------
struct hostent *hp; // DNS stuff
hp = gethostbyname(argv[1]);
if (hp==0) error("Unknown host");
bcopy((char *)hp->h_addr, (char *)&server.sin_addr, hp->h_length);

